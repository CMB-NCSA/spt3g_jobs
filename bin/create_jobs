#!/usr/bin/env python3
from string import Template
import argparse
import yaml
import os
import stat
import linecache


def cmdline():

    # Make a proto-parse use to read in the default yaml configuration
    # file, Turn off help, so we print all options in response to -h
    conf_parser = argparse.ArgumentParser(add_help=False)
    conf_parser.add_argument("-c", "--configfile", help="Config file")
    args, remaining_argv = conf_parser.parse_known_args()
    # If we have -c or --config, then we proceed to read it
    if args.configfile:
        conf_defaults = yaml.safe_load(open(args.configfile))
    else:
        conf_defaults = {}
    # 2. This is the main parser
    parser = argparse.ArgumentParser(description="SPT3G batch file creator",
                                     # Inherit options from config_parser
                                     parents=[conf_parser])
    parser.add_argument("--N_nodes", type=int, action="store", default=1,
                        help="The number of nodes requested")
    parser.add_argument("--N_cores", type=int, action="store", default=1,
                        help="The number of cores requested")
    parser.add_argument("--cpus_per_task", type=int, action="store", default=1,
                        help="The number of cpu-per-task (pared with --np)")
    parser.add_argument("--time_requested", type=str, action="store", default="00:40:00",
                        help="The amount of time requested")
    parser.add_argument("--memory", type=int, action="store", default=16,
                        help="The memory in Gb")
    parser.add_argument("--partition_name", type=str, action="store", default="caps",
                        help="The name of the ICC partition (i.e. caps)")
    parser.add_argument("--node_list", type=str, action="store", default=None,
                        help="The node list, i.e. ccc0246")
    parser.add_argument("--node_array", type=str, action="store", default=None,
                        help="The node array, i.e. 0-19")
    parser.add_argument("--singExec_name", type=str, action="store", default='singExec.sh',
                        help="The exec bash script to run")
    parser.add_argument("--job_name", type=str, action="store", default='spt3g_ingest',
                        help="The job name")

    # The command we will call
    parser.add_argument("--loop_list", type=str, action="store", default=None,
                        help="The list of inputs to loop over")
    parser.add_argument("--cmd_call", type=str, action="store", default=None,
                        help="The command call string")
    parser.add_argument("--submit_dir", type=str, action="store", default="submit_dir",
                        help="The output directory")

    # Re-run a set of indeces for the arrays
    parser.add_argument("--redo_index", default=None, nargs='+',
                        help="The list of indeces to re-run")

    # Define the singularity image
    parser.add_argument("--singularity_cache", type=str, action="store",
                        default='/projects/caps/spt3g/singularity/',
                        help="The name of the singularity image to use")
    parser.add_argument("--singularity_image", type=str, action="store",
                        default='ubuntu_0.2.1_13ccb00c.si',
                        help="The name of the singularity image to use")

    # Set the defaults of argparse using the values in the yaml config file
    parser.set_defaults(**conf_defaults)
    args = parser.parse_args(args=remaining_argv)

    # Update the cmd_call
    args.cmd_call = args.cmd_call.replace("${cpus_per_task}", str(args.cpus_per_task))
    return args


def get_node_array(loop_list):
    count = len(open(loop_list).readlines())
    node_array = f"{0}-{count-1}"
    print(f"# will use --node_array={node_array}")
    return node_array


def select_from_loop_list(loop_list, index):
    selected_lines = []
    for k in index:
        selected_lines.append(linecache.getline(loop_list, int(k)))

    # Add them to a new loop_list
    loop_list_selected = loop_list + ".selec"
    with open(loop_list_selected, "w") as new_loop:
        new_loop.write("".join(selected_lines))
    print(f"# Selected {index} to new loop_list: {loop_list_selected}")
    return loop_list_selected


def update_template(filename, d, outfile):
    """ Read and update a template using a dictionary"""
    with open(filename, 'r') as f:
        src = Template(f.read())
    r = src.substitute(d)
    with open(outfile, 'w') as f:
        f.write(r)
    return


if __name__ == "__main__":

    # Get the command-line arguments
    args = cmdline()

    args.cmd_call = args.cmd_call.rstrip()

    # Define output folder for submit files
    if not os.path.isdir(args.submit_dir):
        os.makedirs(args.submit_dir)
        os.makedirs(f"{args.submit_dir}/logs")

    # Get the local path to get the templates
    try:
        SPT3G_JOBS_DIR = os.environ['SPT3G_JOBS_DIR']
    except KeyError:
        SPT3G_JOBS_DIR = __file__.split('bin')[0]

    # Update index if needed for a re-run
    if args.redo_index:
        args.loop_list = select_from_loop_list(args.loop_list, args.redo_index)

    # get the node_array
    if args.node_array is None:
        args.node_array = get_node_array(args.loop_list)

    # Load and update the singExec template
    template_singleExec = os.path.join(SPT3G_JOBS_DIR, 'etc/singExec.sh')
    args.singExec_fullname = os.path.join(args.submit_dir, args.singExec_name)
    update_template(template_singleExec, args.__dict__, args.singExec_fullname)
    # Make it executable
    st = os.stat(args.singExec_fullname)
    os.chmod(args.singExec_fullname, st.st_mode | stat.S_IEXEC)
    print(f"# SingleExec file: {args.singExec_fullname}")

    # Load and update the submitN template
    template_submitN = os.path.join(SPT3G_JOBS_DIR, 'etc/submitN.sl')
    outfile_submitN = os.path.join(args.submit_dir, 'submitN.sl')
    update_template(template_submitN, args.__dict__, outfile_submitN)
    print(f"# Slurm submit file: {outfile_submitN}")
    print("# Done")

    print("# to run:")
    print(f"\t sbatch {outfile_submitN}")
